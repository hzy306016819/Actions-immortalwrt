name: Build luci-app-overview-widgets Plugin

on:
  workflow_dispatch:
  repository_dispatch:

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  PLUGIN_NAME: luci-app-overview-widgets
  PLUGIN_REPO: https://github.com/hzy306016819/luci-app-overview-widgets.git
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理系统空间
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        # 安装编译依赖
        sudo apt-get -qq update
        sudo apt-get -qq install build-essential ccache flex gawk gettext git libncurses5-dev libssl-dev python3 python3-distutils zlib1g-dev
        sudo timedatectl set-timezone "$TZ"
        
        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone OpenWrt source
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Clone plugin source
      run: |
        cd openwrt
        git clone $PLUGIN_REPO package/$PLUGIN_NAME

    - name: Fix libdeflate issue
      run: |
        cd openwrt
        # 确保libdeflate工具链先编译
        make tools/libdeflate/compile -j$(nproc)
        make tools/libdeflate/install
        
        # 后备方案：如果编译失败则使用系统gzip
        if [ ! -f staging_dir/host/bin/libdeflate-gzip ]; then
          echo "Using system gzip as fallback"
          ln -sf $(which gzip) staging_dir/host/bin/libdeflate-gzip
        fi

    - name: Build plugin
      run: |
        cd openwrt
        # 配置仅编译插件
        echo "CONFIG_PACKAGE_$PLUGIN_NAME=y" > .config
        make defconfig
        
        # 编译插件及其依赖
        make package/utils/lua/host/compile -j$(nproc)
        make package/$PLUGIN_NAME/compile -j$(nproc) V=s

    - name: Collect artifacts
      id: collect
      run: |
        cd openwrt
        # 查找生成的ipk文件
        IPK_FILE=$(find bin -name "${PLUGIN_NAME}*.ipk" | head -n 1)
        if [ -f "$IPK_FILE" ]; then
          echo "Plugin built successfully: $IPK_FILE"
          mkdir -p plugin_output
          cp $IPK_FILE plugin_output/
          echo "status=success" >> $GITHUB_OUTPUT
          echo "IPK_PATH=$(pwd)/plugin_output" >> $GITHUB_ENV
        else
          echo "Error: Plugin IPK file not found!"
          exit 1
        fi

    - name: Create release
      if: steps.collect.outputs.status == 'success'
      run: |
        time=$(date +%Y.%m.%d)
        release_tag="plugin-${PLUGIN_NAME}-$time"
        release_name="${PLUGIN_NAME}-$time"
        
        echo "Automatically built ${PLUGIN_NAME} plugin" > release.txt
        echo "Build date: $(date +'%Y-%m-%d %H:%M:%S')" >> release.txt
        echo "Source repo: ${PLUGIN_REPO}" >> release.txt
        echo "OpenWrt version: ${REPO_URL} (${REPO_BRANCH} branch)" >> release.txt
        
        echo "release_tag=$release_tag" >> $GITHUB_ENV
        echo "release_name=$release_name" >> $GITHUB_ENV

    - name: Upload release
      uses: softprops/action-gh-release@v1
      if: steps.collect.outputs.status == 'success'
      with:
        tag_name: ${{ env.release_tag }}
        name: ${{ env.release_name }}
        body_path: release.txt
        files: ${{ env.IPK_PATH }}/*.ipk
        draft: false
        prerelease: false

    - name: Clean up old workflows
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 10

    - name: Clean up old releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
        keep_latest: 30
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
