name: 237-24.10-apk-build

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 237-24.10-passwall+ssid-auto6-5.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # 需要有写入权限来创建release

    steps:
    # 第一步：检出当前仓库代码
    - name: 检查项目分支
      uses: actions/checkout@v4

    # 第二步：初始化编译环境，安装必要的依赖
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理系统空间
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        # 安装编译依赖
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        
        # 清理和设置时区
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        
        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "START_DATE=$(date +'%Y年%m月%d日 %H点%M分%S秒')" >> $GITHUB_ENV

    # 第三步：下载OpenWrt源码
    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # 第四步：加载软件源配置
    - name: 加载软件源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    # 第五步：添加额外的插件源（overview-widgets）
    - name: 创建文件夹拉取overview-widgets软件源
      run: cd openwrt && git clone https://github.com/hzy306016819/luci-app-overview-widgets.git package/overview-widgets

    # 第六步：更新和安装软件源
    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件源
      run: cd openwrt && ./scripts/feeds install -a

    # 第七步：加载自定义配置
    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # 第八步：下载依赖包
    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # 第九步：编译特定插件（不编译完整固件）
    - name: 编译插件
      id: compile_plugins
      run: |
        cd openwrt
        # 只编译特定插件而不是完整固件
        make package/luci-app-passwall/compile -j$(nproc) V=s
        make package/luci-app-overview-widgets/compile -j$(nproc) V=s
        
        # 检查生成的IPK文件
        find bin -name "*.ipk" -exec ls -lh {} \;
        echo "status=success" >> $GITHUB_OUTPUT

    # 第十步：将IPK文件打包成APK（这里假设你需要的是IPK文件）
    - name: 打包插件文件
      if: steps.compile_plugins.outputs.status == 'success'
      run: |
        cd openwrt/bin/packages/*/*
        mkdir -p plugins_package
        cp *.ipk plugins_package/
        tar -czvf plugins.tar.gz plugins_package/
        echo "PLUGINS_PATH=$PWD/plugins.tar.gz" >> $GITHUB_ENV

    # 第十一步：创建release标签和描述
    - name: 创建release标签
      id: tag
      run: |
         time=$(date +%Y.%m.%d)
         release_tag="237-ImmortalWrt-24.10-plugins-$time"
         release_name="237-ImmortalWrt-24.10-plugins-$time"
         echo "插件包：使用237大佬的源码编译
         237大佬源码网址: https://github.com/padavanonly/immortalwrt-mt798x-24.10
         https://github.com/hzy306016819/luci-app-overview-widgets#插件包
         
         包含插件：
         - luci-app-passwall
         - luci-app-overview-widgets
         
         编译日期：$(date +'%Y年%m月%d日 %H点%M分%S秒')" >> release.txt
         echo "release_name=$release_name" >> $GITHUB_OUTPUT
         echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
         echo "status=success" >> $GITHUB_OUTPUT

    # 第十二步：将插件包上传到release
    - name: 将插件上传到release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success'
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        name: ${{ steps.tag.outputs.release_name }}
        body_path: release.txt
        files: ${{ env.PLUGINS_PATH }}
        draft: false
        prerelease: false

    # 第十三步：清理旧的workflow runs和releases
    - name: 删除工作流运行
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0       # 不保留历史记录
        keep_minimum_runs: 10 # 保留10个最新记录

    - name: 删除旧的releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
        keep_latest: 30   # 保留最新的30个Release
        delete_tags: true # 同时删除关联的标签
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
